using System;
using System.Collections.Generic;
using System.Text;
using System.Diagnostics;
using System.Threading;
using System.Net.Mail;
using System.Xml;

namespace ErrorLoggerService
{
    class ErrorLoggerApp
    {
        #region Member Fields
        private const int CHECK_TIME = 10;
        private const string LOCAL_PATH = "C:\\ErrorLogger\\config.xml";
        private EventLog _log = new EventLog();
        private Thread _thread;
        private int messageID;
        private MailMessage mail;
        private List<String> recipients;
        private List<String> logs;
        private string server;
        private string customMessage;
        private string errors;
        #endregion Memeber Fields


        #region Constructor
        public ErrorLoggerApp()
        {
            mail = new MailMessage();
            recipients = new List<string>();
            logs = new List<string>();
            errors = string.Empty;
            messageID = 2;

            // Process Logic
            ReadConfigFile();
            if (CheckErrors() || messageID == 2)
            {
                CreateEmail();
                SendEmail();
            }
        }
        #endregion


        #region OnStart and OnStop Methods
        public void Start()
        {
            // OnStart, Writes to the EventLog and Starts the Thread
            _log.WriteEntry("ErrorLoggerService started");
            _thread = new Thread( new ThreadStart(Execute));
            _thread.Start();
        }

        public void Stop()
        {
            // OnStop, Writes to the EventLog and terminates the Thread
            _log.WriteEntry("ErrorLoggerService stopped");

            if (_thread != null)
            {
                _thread.Abort();
                _thread.Join();
            }
        }
        #endregion


        #region Execute Method
        private void Execute()
        {
            // The thread that does the Error Checking and Email Sending
            try
            {
                while (true)
                {
                    // Process logic
                    ReadConfigFile();
                    if(CheckErrors() || messageID == 2)
                    {
                        CreateEmail();
                        SendEmail();
                    }
    
                    // Sleep it for 10 minutes
                    Thread.Sleep(600000);
                }
            }
            catch (ThreadAbortException)
            {
                _log.WriteEntry("Thread aborted");
            }
        }
        #endregion


        #region Read Config File
        private bool ReadConfigFile()
        {
            // Reads the config file and fills the member fields
            // If the config can't be found it sets the messageID appropriately
            //  so it will send out an email asking for a user to make one
            XmlDocument xml = new XmlDocument();
            XmlNodeList xnList;
            try
            {
                xml.Load(LOCAL_PATH);

                xnList = xml.SelectNodes("/Config/Recipients");
                foreach (XmlNode xn in xnList)
                {
                    recipients.Add(xn.InnerText.Trim());
                }

                xnList = xml.SelectNodes("/Config/Log");
                foreach (XmlNode xn in xnList)
                {
                    logs.Add(xn.InnerText.Trim());
                }

                xnList = xml.SelectNodes("/Config/Server");
                server = xnList[0].InnerText.Trim();

                xnList = xml.SelectNodes("/Config/Message");
                customMessage = xnList[0].InnerText;

                messageID = 1;
                return true;
            }
            catch
            {
                messageID = 2;
                return false;
            }
        }
        #endregion


        #region Check for Errors
        private bool CheckErrors()
        {
            // Checks for errors in each specified Log and creates an error message from each entry
            bool errorFound = false;

            logs.ForEach(delegate(string log)
            {
                Console.WriteLine(log.Trim());
                EventLog el = new EventLog(log);
                foreach (EventLogEntry entry in el.Entries)
                {
                    if (entry.EntryType == EventLogEntryType.Error && entry.TimeGenerated >= DateTime.Now.AddMinutes(-CHECK_TIME))
                    {
                        errorFound = true;
                        MakeErrorMessage(entry, log);
                    }
                }
            });

            return errorFound;
        }
        #endregion


        #region Create Email
        private void CreateEmail()
        {
            // Creates the email message based on the messageID and puts together all the pieces of the Body
            if (messageID == 1)
            {
                recipients.ForEach(delegate(String name)
                {
                    mail.To.Add(new MailAddress(name.Trim()));
                });

                mail.From = new MailAddress("Automated_Error_Logger--DO_NOT_REPLY@LORD.com");
                mail.Bcc.Add(new MailAddress("tyler_ewing@lord.com"));
                mail.Subject = "Error in Event Log of [" + server + "]";
                mail.Body = customMessage + "\nThere has been error(s) on [" + server + "]:\n\n" + errors;
            }

            if (messageID == 2)
            {
                mail.From = new MailAddress("Automated_Error_Logger--DO_NOT_REPLY@LORD.com");
                mail.To.Add(new MailAddress("tyler_ewing@lord.com"));
                mail.Subject = "Error locating Configuration File on [" + Environment.MachineName + "]";
                mail.Body = @"The configuration file could not be found on [" + Environment.MachineName +
                             "]. No errors will be reported until there is a configuration file in " + LOCAL_PATH +
                             "\nTo create a configuration file, run the Error Logger FrontEnd.";
            }
        }
        #endregion


        #region Send Email
        private void SendEmail()
        {
            // Sends the email and clears the member fields
            try
            {
                SmtpClient smtp = new SmtpClient("smtp.lord.local");
                smtp.Send(mail);
            }
            catch { }

            ClearFields();
        }
        #endregion


        #region Other Private Methods
        private void MakeErrorMessage(EventLogEntry entry, string log)
        {
            // Takes an entry and then formats and makes it look nice for the email
            errors += "Event Type: \t" + entry.EntryType + "\nEvent Log: \t\t" + log + "\nEvent Source:\t" + entry.Source
                        + "\nEvent Category:\t" + entry.Category + "\nEvent ID: \t\t" + entry.InstanceId + "\nDate: \t\t"
                        + entry.TimeGenerated + "\nUser: \t\t" + entry.UserName + "\nServer: \t\t" + server
                        + "\nDescription:\n" + entry.Message + "\n\n";
        }

        private void ClearFields()
        {
            recipients.Clear();
            errors = String.Empty;
            mail = new MailMessage();
        }
        #endregion
    }
}


